document.addEventListener("DOMContentLoaded", function () {
    // Initialize the map centered on San Francisco
    var map = L.map('map').setView([37.7749, -122.4194], 10);

    // Add OpenStreetMap tile layer
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: 'Â© OpenStreetMap'
    }).addTo(map);

    // Variables for layers and user-placed points
    var countyLayer = null;
    var zipLayer = null;
    var points = [];
    var markers = [];
    var polyline = null;
    var circle = null;
    var radiusDisplay = L.control({ position: 'topright' });

    // Function to calculate the distance between two points
    function calculateDistance(latlng1, latlng2) {
        return latlng1.distanceTo(latlng2) / 1000;  // Convert meters to kilometers
    }

    // Function to update the polyline connecting all points and show distances
    function updatePolyline() {
        if (polyline) {
            map.removeLayer(polyline);
        }
        polyline = L.polyline(points, { color: 'blue', weight: 4 }).addTo(map);

        // Calculate the total distance for all lines
        var totalDistance = 0;
        for (var i = 0; i < points.length - 1; i++) {
            totalDistance += calculateDistance(points[i], points[i + 1]);
        }

        // Bind a tooltip to the last point showing the total distance
        polyline.bindTooltip(`Total Distance: ${totalDistance.toFixed(2)} km`, {
            permanent: true,
            opacity: 0.7,
            direction: 'top'
        }).openTooltip(points[points.length - 1]);
    }

    // Function to toggle a point's presence on the map
    function togglePoint(e) {
        var index = points.findIndex(p => p.equals(e.latlng));
        if (index === -1) {
            // Add point if it doesn't exist
            var marker = L.marker(e.latlng).addTo(map);
            marker.on('click', togglePoint);  // Add self-removal functionality
            markers.push(marker);
            points.push(e.latlng);
        } else {
            // Remove the point if it already exists
            map.removeLayer(markers[index]);
            markers.splice(index, 1);
            points.splice(index, 1);
        }

        // Update polyline with remaining points
        updatePolyline();
    }

    // Event listener to add/remove points on the map
    map.on('click', togglePoint);

    // Display the current radius on the map
    radiusDisplay.onAdd = function (map) {
        var div = L.DomUtil.create('div', 'radius-display');
        div.innerHTML = '<h4>Radius: <span id="radius-value">0</span> km</h4>';
        return div;
    };
    radiusDisplay.addTo(map);

    // Function to update the radius display
    function updateRadiusDisplay(radiusKm) {
        document.getElementById('radius-value').textContent = radiusKm.toFixed(2);
    }

    // Event handler to create or update a circle
    function handleCircleClick(e) {
        var radiusMeters = 1000;  // Default radius (1 km)

        if (circle === null) {
            // Create a new circle if one doesn't already exist
            circle = L.circle(e.latlng, {
                color: 'red',
                fillColor: '#f03',
                fillOpacity: 0.3,
                radius: radiusMeters
            }).addTo(map);

            // Update radius display
            updateRadiusDisplay(radiusMeters / 1000);
        } else {
            // Move the circle to the new click location
            circle.setLatLng(e.latlng);
        }

        // Adjust circle radius interactively
        circle.on('mousedown', function () {
            map.dragging.disable();
            map.on('mousemove', adjustRadius);
            map.on('mouseup', stopAdjustRadius);
        });

        function adjustRadius(mouseEvent) {
            var center = circle.getLatLng();
            var newRadiusMeters = center.distanceTo(mouseEvent.latlng);
            circle.setRadius(newRadiusMeters);
            updateRadiusDisplay(newRadiusMeters / 1000);  // Convert to km
        }

        function stopAdjustRadius() {
            map.off('mousemove', adjustRadius);
            map.off('mouseup', stopAdjustRadius);
            map.dragging.enable();
        }
    }

    // Attach right-click event for circle creation
    map.on('contextmenu', handleCircleClick);
 function updateMap() {
            var countyName = document.getElementById('countySelect').value;
            var zipcodes = document.getElementById('zipInput').value.split(',').map(zip => zip.trim());
            var distance = parseFloat(document.getElementById('distanceInput').value);

            // Validate inputs
            if (!countyName || countyName === "Select a county") {
                alert("Please select a valid county.");
                return;
            }
            if (isNaN(distance) || distance <= 0) {
                alert("Please enter a valid distance.");
                return;
            }

            zipcodes = zipcodes.filter(zip => /^\d{5}$/.test(zip));
            if (zipcodes.length === 0) {
                alert("Please enter valid ZIP codes.");
                return;
            }

            // Remove previous layer
            if (zipLayer) {
                map.removeLayer(zipLayer);
            }

            fetch('/api/zips-within-range', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    county_name: countyName,
                    distance: distance,
                    zipcodes: zipcodes
                })
            })
            .then(response => response.json())
            .then(data => {
                zipLayer = L.geoJson(data.geo_json, {
                    style: { color: 'red', weight: 5 },
                    onEachFeature: function(feature, layer) {
                        layer.bindTooltip("ZIP Code: " + feature.properties.ZIP_CODE, { permanent: false, opacity: 0.7 });
                    }
                }).addTo(map);

                map.fitBounds(zipLayer.getBounds());
                document.getElementById('goodZips').value = data.zip_list.join(', ');
            })
            .catch(error => console.error('Error loading the ZIP code data:', error));
        }

      
    // Event listener for county selection change
    document.getElementById('county').addEventListener('change', function () {
        var selectedCounty = this.value;
        highlightData('county', selectedCounty);
    });

    // Event listener for ZIP code input
    document.getElementById('zipcodes').addEventListener('input', function () {
        var zipcodes = this.value.split(',').map(zip => zip.trim());
        highlightData('zipcodes', zipcodes);
    });
  
    // Now map can be accessed outside this block if needed
    fetchDropdownData(); // Make sure this function doesn't need the map object immediately
});
