# catalyst_app/test_app/map_app/views.py
from flask import Flask, Blueprint, render_template, request, jsonify, send_from_directory
import logging
from abstract_utilities import make_list
from abstract_shapes import *
shape_mgr = shapeManager("path_to_flask/app/static/geo_data")
# Importing RotatingFileHandler
# Add the handler to the app's logger
def get_filtered(designation, items):
    """
    Filters GeoDataFrame based on designation and items.
    
    Args:
        designation (str): The designation to filter by, e.g., 'counties'.
        items (list or str): List or single item to filter the GeoDataFrame by.
    
    Returns:
        GeoDataFrame: Filtered GeoDataFrame based on the input criteria.
    """
    # Get the closest valid designation
    designation = get_closest_designation(designation)
    
    # Fetch the shape data as a GeoDataFrame
    geo_df = shape_mgr.get_contents(designation, 'shp')  # Assumes shape_mgr is defined elsewhere
    geo_dfj = shape_mgr.get_contents(designation, 'geojson')
    # Convert the GeoDataFrame's coordinate reference system to WGS 84
    
    # Get the appropriate column name for filtering
    column_name = shape_mgr.get_column_name(designation, file_type='shp')  # Assumes shape_mgr is defined elsewhere
    
   # Log the type and content of items being used for filtering
   logging.info(f"Converting {type(items)} items to list")

    # Ensure 'items' is a list for filtering
    items = make_list(items)
    
    
    # Filter the GeoDataFrame
    filtered_df = geo_dfj[geo_dfj[column_name].isin(items)]
    logging.info(f"Filtered data returned {type(filtered_df)} ")
    return filtered_df

@map_bp.route('/testMap')
def some_page():
    return render_template('testMap.html')


@map_bp.route('/static-geojson/<designation>', methods=['GET'])
def serve_static_geojson(designation):
    logging.info(f"serve_static_geojson starts with {designation}")

    geojson_file_path = shape_mgr.get_file_path(designation, 'geojson')
    if geojson_file_path:
        return send_from_directory(dirname(geojson_file_path), basename(geojson_file_path))
    return jsonify({'error': f'{designation} data not found'}), 404

@map_bp.route('/filtered-geojson/<designation>/<items>', methods=['GET'])
def get_filtered_geojson(designation, items):
    logging.info(f"API Call: get_filtered_geojson starts with {designation} from {items}")
    # Convert items from string to list and get the closest valid designation
    designation = get_closest_designation(designation)
    column_name = shape_mgr.get_column_name(designation, file_type='shp')
    # Get filtered GeoDataFrame
    filtered_geojson = get_filtered(designation, items)
    return {"geo_json":filtered_geojson.to_json(),"column_name":column_name}
    # Convert GeoDataFrame to GeoJSON format
    if not filtered_geojson.empty:
        
        geojson_data = filtered_geojson.to_json()
        logging.info("Filtered GeoJSON data is ready to be sent.")
    else:
        geojson_data = {}
        logging.warning("Filtered GeoDataFrame was empty; returning empty GeoJSON.")

    # Return the GeoJSON data
    return geojson_data
@map_bp.route('/static-geolist/<designation>', methods=['GET'])
def get_geo_list(designation):
    column_list = shape_mgr.get_column_list(get_closest_designation(designation))
    logging.info(f"get_geo_list starts with {designation} from {column_list}")

    if column_list:
        return jsonify(column_list)
    return jsonify({"error":"column list not found"})

@map_bp.route('/get-zipcode', methods=['POST'])
def get_zipcode():
    data = request.get_json()
    point = Point(data['lng'], data['lat'])
    zip_gdf = shape_mgr.get_contents('zipcodes', 'shp')
    # Find which ZIP code polygon contains the clicked point
    distance_km = 5
    zip_gdf['distance'] = zip_gdf.geometry.apply(lambda x: point.distance(x) * 111)  # Convert to km (approx.)
    matching_zips = zip_gdf[zip_gdf['distance'] <= distance_km]

    if not matching_zips.empty:
        # Return the matched polygons as a list of GeoJSON features
        features = [polygon.__geo_interface__ for polygon in matching_zips.geometry]
        return jsonify({'geojson': features})
    else:
        return jsonify({'geojson': []})
